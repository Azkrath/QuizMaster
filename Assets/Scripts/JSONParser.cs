using System.Collections;
using System.Collections.Generic;
using System.IO;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.Networking;

public class JSONParser : MonoBehaviour
{
    //[SerializeField] TextAsset jsonFile;
    [SerializeField] string apiURL = "http://localhost/questions.json";
    string jsonString;
    Questions questions;
    public delegate void OnQuestionsReceived(Questions questions);
    public static JSONParser instance;


    void Awake() 
    {
        if (instance == null) 
        {
            instance = this;
            DontDestroyOnLoad(this.gameObject);
        } else 
        {
            Destroy(this.gameObject);
        }
        StartCoroutine(GetJsonFromAPI(apiURL, HandleReceivedQuestions));
    }

    // Generated by ChatGPT4
    IEnumerator GetJsonFromAPI(string url, OnQuestionsReceived onReceived)
    {
        using (UnityWebRequest webRequest = UnityWebRequest.Get(url))
        {
            yield return webRequest.SendWebRequest();

            if (webRequest.result != UnityWebRequest.Result.Success)
            {
                Debug.LogError("Error: " + webRequest.error);
                onReceived?.Invoke(null); 
            }
            else
            {
                jsonString = webRequest.downloadHandler.text;
                Debug.Log("Questions from json: " + jsonString);
                questions = JsonUtility.FromJson<Questions>(jsonString);

                onReceived?.Invoke(questions);
            }
        }
    }

    // Generated by ChatGPT4
    void HandleReceivedQuestions(Questions questions)
    {
        if (questions != null)
        {
            // Handle the jsonString, if needed
        }
        else
        {
            Debug.LogError("Failed to load questions.");
        }
    }


    public Questions GetQuestions()
    {
        // if(questions == null) 
        // {
        //     jsonString = jsonFile.text;
        //     questions = JsonUtility.FromJson<Questions>(jsonString);
            
        // }
        Debug.Log("Return the questions to Quiz");
        return questions;
    }

}